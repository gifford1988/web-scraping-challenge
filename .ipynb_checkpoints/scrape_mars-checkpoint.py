{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scrape Web Data about Mars and Return one Library to collect all the scrape data\n",
    "# Dependencies\n",
    "from bs4 import BeautifulSoup as bs\n",
    "import requests\n",
    "import pandas as pd\n",
    "from splinter import Browser\n",
    "from splinter.exceptions import ElementDoesNotExist\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Execute Chromedriver\n",
    "executable_path = {'executable_path': \"C:/Users/giffo/Downloads/chromedriver_win32/chromedriver.exe\"}\n",
    "browser = Browser(\"chrome\", **executable_path, headless=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define scrape function\n",
    "def scrape():\n",
    "    # Create a library that holds all the Mars' Data\n",
    "    mars_library = {}\n",
    "    # NASA Mars News\n",
    "    # We will scrape the lastest News Title and Paragragh Text from NASA Mars News Site(https://mars.nasa.gov/news/).\n",
    "    # URL of page to be scraped\n",
    "    url1 = 'https://mars.nasa.gov/news/?page=0&per_page=40&order=publish_date+desc%2Ccreated_at+desc&search=&category=19%2C165%2C184%2C204&blank_scope=Latest'\n",
    "    #Visit the page using the browser\n",
    "    browser.visit(url1)\n",
    "    # assign html content\n",
    "    html = browser.html\n",
    "    # Create a Beautiful Soup object\n",
    "    soup1 = bs(html, \"html5lib\")\n",
    "    # Extract the text from the class=\"content_title\" and clean up the text use strip\n",
    "    news_title = soup1.find_all('div', class_='content_title')[0].find('a').text.strip()\n",
    "    # Extract the paragraph from the class=\"rollover_description_inner\" and clean up the text use strip\n",
    "    news_p = soup1.find_all('div', class_='rollover_description_inner')[0].text.strip()\n",
    "    # put infos into Library\n",
    "    mars_library['news_title'] = news_title\n",
    "    mars_library['news_p'] = news_p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mars_library' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-28-f32cd26e8799>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[0mfeatured_image_url\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"https://www.jpl.nasa.gov\"\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0mpartial_address\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[1;31m# Put infos into Library\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 15\u001b[1;33m \u001b[0mmars_library\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'featured_image_url'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfeatured_image_url\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     16\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'mars_library' is not defined"
     ]
    }
   ],
   "source": [
    "# JPL Mars Space Images - Featured Image\n",
    "# URL of page to be scraped\n",
    "url2 = 'https://www.jpl.nasa.gov/spaceimages/?search=&category=Mars'\n",
    "#Visit the page using the browser\n",
    "browser.visit(url2)\n",
    "# assign html content\n",
    "html = browser.html\n",
    "# Create a Beautiful Soup object\n",
    "soup2 = bs(html, \"html5lib\")\n",
    "#Scrape Path for the Feature Image. got the partial path of the url\n",
    "partial_address = soup2.find_all('a', class_='fancybox')[0].get('data-fancybox-href').strip()\n",
    "#combine the root url to get the full address\n",
    "featured_image_url = \"https://www.jpl.nasa.gov\"+partial_address\n",
    "# Put infos into Library\n",
    "mars_library['featured_image_url'] = featured_image_url\n",
    "\n",
    "\n",
    "# #### Mars Weather\n",
    "# Use splinter to scrape the latest Mars weather tweet from the Mars Weather twitter account  (https://twitter.com/marswxreport?lang=en)\n",
    "# URL of page to be scraped\n",
    "url3 = 'https://twitter.com/marswxreport?lang=en'\n",
    "#Visit the page using the browser\n",
    "browser.visit(url3)\n",
    "# assign html content\n",
    "html = browser.html\n",
    "# Create a Beautiful Soup object\n",
    "soup3 = bs(html, \"html5lib\")\n",
    "#scrap latest Mars weather tweet\n",
    "mars_weather = soup3.find_all('p', class_='TweetTextSize TweetTextSize--normal js-tweet-text tweet-text')[0].text\n",
    "# Put infos into Library\n",
    "mars_library['mars_weather'] = mars_weather\n",
    "\n",
    "\n",
    "# #### Mars Facts\n",
    "# Use Pandas to scrape the table from Mars Facts webpage and convert the data to a HTML table string\n",
    "# URL of page to be scraped\n",
    "url4 = 'https://space-facts.com/mars/'\n",
    "# use Pandas to get the url table\n",
    "tables = pd.read_html(url4)\n",
    "# Convert list of table into pandas dataframe\n",
    "df = tables[0]\n",
    "# update column name\n",
    "df.columns=['description','value']\n",
    "#Set the index to the description column\n",
    "df.set_index('description', inplace=True)\n",
    "# Use pandas to  generate HTML tables from DataFrames and save as html file\n",
    "mars_facts=df.to_html(justify='left')\n",
    "# Put infos into Library\n",
    "mars_library['mars_facts'] = mars_facts\n",
    "\n",
    "\n",
    "# #### Mars Hemisperes\n",
    "# USGS Astrogeology site to obtain high resolution images for each of Mar's hemispheres\n",
    "# URL of page to be scraped\n",
    "url5 = 'https://astrogeology.usgs.gov/search/results?q=hemisphere+enhanced&k1=target&v1=Mars'\n",
    "#Visit the page using the browser\n",
    "browser.visit(url5)\n",
    "# assign html content\n",
    "html = browser.html\n",
    "# Create a Beautiful Soup object\n",
    "soup5 = bs(html,\"html5lib\")\n",
    "# assigned list to store:\n",
    "hemisphere_image_urls = []\n",
    "# create empty dict\n",
    "dict = {}\n",
    "# get all the title\n",
    "results = soup5.find_all('h3')\n",
    "# Loop through each result\n",
    "for result in results:\n",
    "    # Get text info from result\n",
    "    itema = result.text\n",
    "    time.sleep(1)    \n",
    "    browser.click_link_by_partial_text(itema)\n",
    "    time.sleep(1)\n",
    "    # assign html content\n",
    "    htmla = browser.html\n",
    "    # Create a Beautiful Soup object\n",
    "    soupa = bs(htmla,\"html5lib\")\n",
    "    time.sleep(1)\n",
    "    # Grab the image link\n",
    "    linka = soupa.find_all('div', class_=\"downloads\")[0].find_all('a')[0].get(\"href\")\n",
    "        # Pass title to Dict\n",
    "    time.sleep(1)\n",
    "    dict[\"title\"]=itema\n",
    "    # Pass url to Dict\n",
    "    dict[\"img_url\"]=linka\n",
    "    # Append Dict to the list \n",
    "    hemisphere_image_urls.append(dict)\n",
    "    # Clean Up Dict\n",
    "    dict = {}\n",
    "    browser.click_link_by_partial_text('Back')\n",
    "    time.sleep(1)\n",
    "# Put infos into Library\n",
    "mars_library['hemisphere_image_urls']=hemisphere_image_urls\n",
    "    \n",
    "# Return Library\n",
    "return mars_library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
